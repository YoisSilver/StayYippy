<?xml version="1.0" encoding="utf-8"?><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 300 300" style="enable-background:new 0 0 300 300;"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <g transform="matrix(0.948131, 0, 0, 0.948123, 9.142361, 16.326662)" style="">
    <g>
      <g>
        <path d="M 69.701 170.191 L 64.301 160.835 C 58.613 163.806 53.052 167.137 47.77 170.738 L 54.313 179.409 C 59.23 176.056 64.406 172.954 69.701 170.191 Z" style=""/>
        <path d="M 103.383 157.33 L 100.485 147.019 C 94.216 148.613 87.98 150.589 81.952 152.891 L 86.135 162.794 C 91.748 160.649 97.549 158.813 103.383 157.33 Z" style=""/>
        <path d="M 214.648 158.124 C 208.85 155.369 202.805 152.919 196.672 150.84 L 192.904 160.892 C 198.611 162.825 204.237 165.105 209.632 167.67 L 214.648 158.124 Z" style=""/>
        <path d="M 261.258 191.538 L 252.994 198.753 C 257.087 202.99 260.947 207.508 264.473 212.172 L 273.592 205.951 C 269.805 200.936 265.658 196.085 261.258 191.538 Z" style=""/>
        <path d="M 225.378 176.329 C 230.412 179.505 235.301 183.01 239.901 186.745 L 247.188 178.629 C 242.244 174.614 236.992 170.846 231.576 167.436 L 225.378 176.329 Z" style=""/>
        <path d="M 19.029 195.829 L 27.56 202.762 C 31.489 198.393 35.74 194.206 40.193 190.32 L 32.605 182.46 C 27.819 186.634 23.253 191.133 19.029 195.829 Z" style=""/>
        <path d="M 109.218 162.24 L 114.855 162.243 L 121.695 152.381 L 143.681 152.528 L 133.843 184.77 C 133.843 185.711 134.648 186.478 135.638 186.478 L 144.683 186.478 L 163.577 153.16 L 180.919 153.707 C 185.854 153.707 189.848 150.113 189.848 145.679 C 189.852 141.249 185.851 137.655 180.922 137.655 L 163.452 138.21 L 144.685 105.112 L 135.635 105.11 C 134.646 105.112 133.842 105.878 133.842 106.819 L 143.611 138.837 L 121.574 139.019 L 114.851 129.347 L 109.213 129.349 C 108.463 129.349 107.857 129.924 107.857 130.635 L 107.857 160.957 C 107.861 161.665 108.469 162.244 109.218 162.24 Z" style=""/>
        <path d="M 164.393 202.924 C 157.048 201.332 149.541 200.525 142.07 200.525 C 95.094 200.525 54.983 230.987 44.531 274.601 C 42.527 282.961 41.748 291.4 42.102 299.743 L 53.334 299.743 L 53.334 299.74 C 52.973 292.195 53.656 284.554 55.468 276.987 C 59.141 277.892 75.563 282.226 75.041 287.25 C 74.602 291.463 73.176 296.261 74.362 299.74 L 84.686 299.74 C 86.104 298.758 87.471 298.29 88.808 299.627 C 88.844 299.665 88.89 299.703 88.928 299.74 L 170.448 299.74 C 151.261 288.119 148.547 267.59 148.547 267.59 C 147.192 267.029 151.065 252.447 145.034 250.696 C 138.991 248.945 135.184 250.348 126.628 246.719 C 118.061 243.089 121.269 238.016 122.676 225.911 C 123.276 220.746 124.658 216.123 126.42 212.489 C 131.509 211.638 136.738 211.193 142.068 211.193 C 148.697 211.193 155.372 211.91 161.902 213.324 C 185.06 218.339 204.778 231.63 217.422 250.744 C 226.954 265.157 231.596 281.578 231.048 298.223 C 230.316 298.731 229.528 299.235 228.705 299.743 L 242.203 299.743 C 243.093 280.587 237.886 261.642 226.921 245.064 C 212.684 223.536 190.478 208.573 164.393 202.924 Z" style=""/>
      </g>
    </g>
  </g>
  <g/>
  <g/>
  <g/>
  <g/>
  <g/>
  <g/>
  <g/>
  <g/>
  <g/>
  <g/>
  <g/>
  <g/>
  <g/>
  <g/>
  <g/>
  <path d="M 267.136 233.938 C 271.909 236.949 276.545 240.273 280.906 243.814 L 287.815 236.119 C 283.128 232.312 278.148 228.74 273.013 225.507 L 267.136 233.938 Z" style="" transform="matrix(0.913545, 0.406737, -0.406737, 0.913545, 119.434114, -92.572023)"/>
  <path d="M 275.68 264.617 C 280.453 267.628 285.089 270.952 289.45 274.493 L 296.359 266.798 C 291.672 262.991 286.692 259.419 281.557 256.186 L 275.68 264.617 Z" style="" transform="matrix(0.71934, 0.694659, -0.694659, 0.71934, 264.594669, -124.215609)"/>
  <path d="M 279.563 295.297 C 284.336 298.308 288.972 301.632 293.333 305.173 L 300.242 297.478 C 295.555 293.671 290.575 290.099 285.44 286.866 L 279.563 295.297 Z" style="" transform="matrix(0.642787, 0.766045, -0.766045, 0.642787, 330.321294, -116.336321)"/>
  <path d="M 8.421 223.715 C 13.194 220.704 17.83 217.38 22.191 213.839 L 29.1 221.534 C 24.413 225.341 19.433 228.913 14.298 232.146 L 8.421 223.715 Z" style="" transform="matrix(-0.913545, 0.406737, -0.406737, -0.913545, 126.598391, 419.075659)"/>
  <path d="M -0.123 254.395 C 4.65 251.384 9.286 248.06 13.647 244.519 L 20.556 252.214 C 15.869 256.021 10.889 259.593 5.754 262.826 L -0.123 254.395 Z" style="" transform="matrix(-0.719339, 0.694659, -0.694659, -0.719339, 193.781558, 429.052039)"/>
  <path d="M -3.544 291.305 C 1.229 288.294 5.865 284.97 10.226 281.429 L 17.135 289.124 C 12.448 292.931 7.468 296.503 2.333 299.736 L -3.544 291.305 Z" style="" transform="matrix(-0.642787, 0.766045, -0.766045, -0.642787, 233.762806, 472.159492)"/>
</svg>